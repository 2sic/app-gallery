{"version":3,"file":"styles.min.css","mappings":"AAEA;;;;CAAA,CCKE,wBACE,kBACA,cACA,qBACA,eAEA,+BAEE,SAIE,4DACE,kFAMJ,2CACE,gBACA,+CACE,8BAEF,qDACE,qBAMJ,mCACE,WAEA,cACA,eAIJ,iCACE,kBACA,UACA,MACA,OACA,SACA,QACA,4CACA,2BACA,gFACA,UAGA,6CACE,WACA,WACA,kBACA,kBACA,kBACA,iFACA,+BAGA,wDACE,eACA,kBACA,kBACA,mBAIF,oDACE,wBACA,qBACA,kBACA,WACA,QACA,2BACA,eACA,mBACA,sBAQR,+BAEE,mCACA,mKClCA,yBD+BF,+BAOI,mCACA,oJAIF,oDACE,kFC5CF,yBD2CA,oDAII,2EAYN,qCACE,kBACA,+EAEE,W","sources":["webpack://app-gallery/./src/styles/_sass-comments.scss","webpack://app-gallery/./bs5/styles/_style.scss","webpack://app-gallery/./node_modules/bs5/scss/mixins/_breakpoints.scss"],"sourcesContent":["// the following comment is multi-line and will be included in the final CSS\r\n// which helps users understand where it comes from\r\n/*!\r\n * This file was auto-generated using SASS\r\n * You can manually modify it - but usually you will want to \r\n * Re-generate it using the SASS variables of your theme\r\n*/","ï»¿//\r\n// This SCSS generates the css for the general styles\r\n//\r\n// It is used by all CSS generators (Bootstrap3/4, etc.)\r\n// To keep things simple, it uses the standard variables of\r\n// bootstrap 4 conventions.\r\n.app-ga7-main {\r\n  a.app-ga7 {\r\n    position: relative;\r\n    display: block;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n\r\n    figure {\r\n      // This is necessary because bootstrap otherwise has other margins and we can't use m-0\r\n      margin: 0;\r\n\r\n      /* Effects for Mouse-Over */\r\n      &.effect-darken {\r\n        &:hover .overlay {\r\n          background: rgba(var(--bs-dark-rgb, var(--bs-dark-rgb-fallback-app-gallery)), 0.4);\r\n        }\r\n      }\r\n  \r\n      // https://w3bits.com/css-image-hover-zoom/\r\n      // https://w3bits.com/labs/css-image-hover-zoom/\r\n      &.effect-zoom {\r\n        overflow: hidden; /* [1.2] Hide the overflowing of child elements */\r\n        img {\r\n          transition: transform .5s ease;\r\n        }\r\n        &:hover img {\r\n          transform: scale(1.2);\r\n        }\r\n      }\r\n\r\n      // Make sure that in responsive case where the container is larger than the image, it expands properly\r\n      // If you use max-width, then there will be cases where the container is larger than the image\r\n      img {\r\n        width: 100%;\r\n        // workaround for lazy-loading issues\r\n        min-width: 1px;\r\n        min-height: 1px;\r\n      }\r\n    }\r\n\r\n    .overlay {\r\n      position: absolute;\r\n      z-index: 1;\r\n      top: 0;\r\n      left: 0;\r\n      bottom: 0;\r\n      right: 0;\r\n      transition: background-color 0.3s ease-in-out;\r\n      backface-visibility: hidden;\r\n      background: rgba(var(--bs-dark-rgb, var(--bs-dark-rgb-fallback-app-gallery)), 0);\r\n      padding: 0;\r\n\r\n      // The caption box ensures a black-gradient behind the text at the bottom of the image\r\n      div.caption {\r\n        color: white;\r\n        width: 100%;\r\n        padding: 15px 20px;\r\n        font-size: smaller;\r\n        line-height: 1.1em;\r\n        background-image: linear-gradient( 180deg, transparent 5%, rgba(0,0,0,.7) 70%);\r\n        background-color: transparent;\r\n\r\n        // If the caption has a badge, the behaviour is a bit different\r\n        &.with-badge {\r\n          font-size: 0.9em;\r\n          line-height: 1.3em;\r\n          position: relative;\r\n          padding-right: 40px;\r\n        }\r\n\r\n        // The badge pill is right-aligned a bit lighter\r\n        .badge {\r\n          vertical-align: text-top;\r\n          display: inline-block;\r\n          position: absolute;\r\n          right: 20px;\r\n          top: 50%;\r\n          transform: translateY(-50%);\r\n          font-size: 12px;\r\n          font-weight: normal;\r\n          border: 2px solid #fff;\r\n        }\r\n      }      \r\n    }\r\n  }\r\n\r\n\r\n  // Masonry Style\r\n  .app-ga7-masonry {\r\n    // Small screens should always show 2 columns with narrow gap\r\n    column-count: 2;\r\n    column-gap: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-gallery)) / 2);\r\n\r\n    // Larger screens show 3 columns with larger gap\r\n    @include media-breakpoint-up(lg) {\r\n      column-count: 3;\r\n      column-gap: var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-gallery)); \r\n    }\r\n\r\n    // Set vertical gap of each figure-box\r\n    figure.app-ga7-image {\r\n      margin-bottom: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-gallery)) / 2);\r\n\r\n      @include media-breakpoint-up(lg) {\r\n        margin-bottom: var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-gallery)); \r\n      }\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n/* Style the captions on Gallery7 Fancybox */\r\n\r\n.app-ga7-fancybox {\r\n  .fancybox__caption {\r\n    text-align: center;\r\n    p,\r\n    h6 {\r\n      color: white;\r\n    }\r\n  }\r\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}