@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade;
@using ToSic.Sxc.Adam;
@{
  /* 1. Pre-Flight: Determine which Album to show or show error
   * This will check if the url specifies a specific album, and if yes, use that
   * If not, use the one configured in the module (for single-album scenarios)
   * If nothing is found, it will stop after this code block (see `return` below)
   */

  // Get page Parameter for album=... (works on Dnn & Oqtane)
  var albumInUrl = MyPage.Parameters["Album"];
  var showingSubAlbum = Text.Has(albumInUrl);

  // If album QueryString is specified, take album with path matching Url, else take "current" album of the module
  var album = showingSubAlbum
    ? MyItems.FirstOrDefault(a => a.String("Path") == albumInUrl)
    : MyItem;
  
  // If no album found, show error and stop processing this template using return
  if (album == null) {
    <h1>@App.Resources.String("AlbumNotFound")</h1>
    <a href="@Link.To()" class="btn btn-outline-primary btn-sm">@App.Resources.String("BackToOverview")</a>
    Kit.Page.SetHttpStatus(404);
    return;
  }
}
@{
  /* 2. The album is now known - let's prepare some stuff */

  // 2.1 Set the title of the page
  Kit.Page.SetTitle(album.String("Title") + " | ");       // will prepend to the existing title
  // Kit.Page.SetTitle(album.String("Title"), "[album]"); // Alternative: this would replace a placeholder [album] in the title with the title

  // 2.2 Determine if we should show as Masonry
  var albumTiling = Text.First(album.Presentation.String("TileStructure"), MyView.Identifier);
  var useMasonry = albumTiling == "masonry";

  // visual effect for mouse interaction
  var effect = "effect-zoom"; // alternative: "effect-darken"; 

  // 2.3 Determine the widths of each part, based on 12 Bootstrap Cols; 
  var imgResizeFactor = useMasonry ? "4:12" : "3:12";

  // 2.5 Other stuff like class to use on the container-div etc.
  var classForMainDiv = useMasonry ? "app-ga7-masonry" : "row mb-4";

  // Use different image settings based ot the expected output
  var imageSettings = Kit.Image.Settings(useMasonry ? "GalleryMasonry" : "Content", factor: imgResizeFactor);

  // define dom attribute for fancybox
  var fancyboxAttribute = "app-gallery7-fancybox-" + UniqueKey; 

  // 2.6 Prepare the toolbar to use on each picture for adding metadata
  // note that it won't show when a demo-gallery is shown, to ensure that the user doesn't modify demo data
  var picToolbar = Kit.Toolbar.Empty().DetectDemo(album);

  // 2.9 Helpers used later in the Template
  var helpers = GetCode("SortImages.cs");        // Has helper code for sorting
}
@* 4. Show the Album *@
<div class="app-ga7-main" @Kit.Toolbar.Default(album)>

  @* Display Album Title or information that title is hidden *@
  @Html.Partial("Album.Part-Title-Description.cshtml", new { album })

  @* 4.1 Display the images *@
  <div class="@classForMainDiv">
    @foreach (IFile pic in helpers.GetImagesSorted(album)) {
      @* 4.2 Prepare caption, tooltip, toolbar etc. for showing the image afterwards *@

      // Get image title and description from metadata - make sure it has no HTML inside
      var picTitle = pic.Metadata.String("Title", scrubHtml: true);
      var picDescr = pic.Metadata.String("Description", scrubHtml: true);

      // Build the Caption for the Lightbox - as a data-caption attribute with HTML encoded
      var lbCaption = (album.Presentation.Bool("ShowImageTitle") && Text.Has(picTitle))
        ? Tag.H6(picTitle) + (Text.Has(picDescr) ? Tag.P(picDescr) : null)
        : null;

      // Generate the picture object for telling the lightbox the src, srcset etc.
      // note that pic.Picture(...) wouldn't work, because it's an IFile and not an ITypedItem
      var lbPic = Kit.Image.Picture(pic, settings: "Lightbox");

      @* 4.3 If not Masonry, add some responsive classes to the div *@
      <div class='@(useMasonry ? "" : "col-12 col-sm-6 col-md-4 col-lg-3 mb-4" )'>
        @* 4.4 Now show each image *@
        <a class="app-ga7" @fancyboxAttribute data-src="@lbPic.Src" data-srcset="@lbPic.SrcSet" data-sizes="@lbPic.Sizes" data-preload="false" @Tag.Attr("data-caption", lbCaption)>
          <figure class="app-ga7-image @effect" @picToolbar.Metadata(pic, "ImageMetadata")>
            @* 4.5 Show the Overlay, an optional title (based on settings) and the image itself *@
            <figcaption class="overlay d-flex align-items-end">
              @if (Text.Has(picTitle)) { <div class="caption">@picTitle</div> }
            </figcaption>

            @Kit.Image.Picture(pic, settings: imageSettings)
          </figure>
        </a>
      </div>
    }
  </div>
</div>

@* 5. Show back button if the view is used as detail view *@
@if (showingSubAlbum) {
  <a href="@Link.To()" class="btn btn-outline-primary btn-sm">@App.Resources.String("BackToOverview")</a>
}

@Html.Partial("Assets.cshtml", new { Scripts = true, fancyboxAttribute })